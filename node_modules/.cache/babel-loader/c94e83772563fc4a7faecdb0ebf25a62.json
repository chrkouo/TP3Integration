{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-Le9Yoz01lTqugUOThRlZ2tg41xxfHJs\",\n  authDomain: \"questtracker2.firebaseapp.com\",\n  projectId: \"questtracker2\",\n  storageBucket: \"questtracker2.appspot.com\",\n  messagingSenderId: \"239408671844\",\n  appId: \"1:239408671844:web:d2728daf9def1bdf3e0371\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"adventurerDB\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"adventurerDB\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"adventurerDB\"), {\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};\n\nexport { auth, db, signInWithGoogle, logInWithEmailAndPassword, registerWithEmailAndPassword, sendPasswordReset, logout };","map":{"version":3,"sources":["C:/Users/1834343/Downloads/TP3/tpfinal_backend-frontend/frontend/frontend_tpfinal/src/firebase.js"],"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","query","getDocs","collection","where","addDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","auth","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","authProvider","email","err","console","error","alert","message","logInWithEmailAndPassword","password","registerWithEmailAndPassword","sendPasswordReset","logout"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport {\r\n  GoogleAuthProvider,\r\n  getAuth,\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  signOut,\r\n} from \"firebase/auth\";\r\nimport {\r\n  getFirestore,\r\n  query,\r\n  getDocs,\r\n  collection,\r\n  where,\r\n  addDoc,\r\n} from \"firebase/firestore\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB-Le9Yoz01lTqugUOThRlZ2tg41xxfHJs\",\r\n  authDomain: \"questtracker2.firebaseapp.com\",\r\n  projectId: \"questtracker2\",\r\n  storageBucket: \"questtracker2.appspot.com\",\r\n  messagingSenderId: \"239408671844\",\r\n  appId: \"1:239408671844:web:d2728daf9def1bdf3e0371\",\r\n};\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\nconst signInWithGoogle = async () => {\r\n  try {\r\n    const res = await signInWithPopup(auth, googleProvider);\r\n    const user = res.user;\r\n    const q = query(collection(db, \"adventurerDB\"), where(\"uid\", \"==\", user.uid));\r\n    const docs = await getDocs(q);\r\n    if (docs.docs.length === 0) {\r\n      await addDoc(collection(db, \"adventurerDB\"), {\r\n        uid: user.uid,\r\n        name: user.displayName,\r\n        authProvider: \"google\",\r\n        email: user.email,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\n\r\nconst logInWithEmailAndPassword = async (email, password) => {\r\n  try {\r\n    await signInWithEmailAndPassword(auth, email, password);\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\nconst registerWithEmailAndPassword = async (name, email, password) => {\r\n  try {\r\n    const res = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = res.user;\r\n    await addDoc(collection(db, \"adventurerDB\"), {\r\n      uid: user.uid,\r\n      name,\r\n      authProvider: \"local\",\r\n      email,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\nconst sendPasswordReset = async (email) => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n    alert(\"Password reset link sent!\");\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\n\r\nconst logout = () => {\r\n  signOut(auth);\r\n};\r\n\r\n\r\n\r\nexport { auth,\r\n  db,\r\n  signInWithGoogle,\r\n  logInWithEmailAndPassword,\r\n  registerWithEmailAndPassword,\r\n  sendPasswordReset,\r\n  logout,};\r\n"]},"metadata":{},"sourceType":"module"}