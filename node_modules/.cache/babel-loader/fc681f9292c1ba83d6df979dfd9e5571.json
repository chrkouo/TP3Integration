{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1834343\\\\Downloads\\\\TP3\\\\frontend_tpfinal\\\\src\\\\Places\\\\Main\\\\Quests.js\",\n    _s = $RefreshSig$();\n\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport Button from \"@mui/material/Button\";\nimport { collection, query, onSnapshot, doc, updateDoc, deleteDoc, where } from \"firebase/firestore\";\nimport { db } from \"../../firebase.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quests(props) {\n  _s();\n\n  const {\n    userId\n  } = props;\n  let completed = false;\n  const [checked, setChecked] = useState(completed);\n  const [quest, setQuest] = useState([]);\n\n  const handleChange = async (e, id) => {\n    const taskDocRef = doc(db, \"adventurerDB\", userId, \"quests\", id);\n    onSnapshot(taskDocRef, snapshot => {\n      snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data(),\n        completed: data.completed\n      }));\n    });\n    completed = data.completed;\n\n    try {\n      await updateDoc(taskDocRef, {\n        completed: checked\n      });\n    } catch (err) {\n      alert(err);\n    }\n\n    setChecked(!e.target.completed);\n  };\n\n  const handleDelete = async id => {\n    const taskDocRef = doc(db, \"adventurerDB\", userId, \"quests\", id);\n    onSnapshot(taskDocRef, snapshot => {\n      snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data()\n      }));\n    });\n\n    try {\n      await deleteDoc(taskDocRef);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  useEffect(() => {\n    const taskColRef = query(collection(db, \"adventurerDB\", userId, \"quests\"), where(\"userId\", \"==\", userId));\n    console.log(taskColRef);\n    onSnapshot(taskColRef, snapshot => {\n      setQuest(snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data()\n      })));\n    });\n  }, []);\n  console.log(quest);\n  const myQuest = quest.map(a => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n      checked: checked,\n      label: a.data.name,\n      onChange: handleChange(a.data.completed, a.id),\n      inputProps: {\n        \"aria-label\": \"controlled\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), a.data.name, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleDelete(a.id, a.id),\n        variant: \"contained\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 10,\n    sx: {\n      padding: \"15px\",\n      heigth: \"400px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: myQuest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quests, \"vWTRkjOOJVwa3YPRv6b1PCDR2RY=\");\n\n_c = Quests;\nexport default Quests;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quests\");","map":{"version":3,"sources":["C:/Users/1834343/Downloads/TP3/frontend_tpfinal/src/Places/Main/Quests.js"],"names":["Paper","Typography","React","useEffect","Checkbox","useState","Box","Button","collection","query","onSnapshot","doc","updateDoc","deleteDoc","where","db","Quests","props","userId","completed","checked","setChecked","quest","setQuest","handleChange","e","id","taskDocRef","snapshot","docs","map","data","err","alert","target","handleDelete","taskColRef","console","log","myQuest","a","name","padding","heigth"],"mappings":"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","sourcesContent":["import Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport * as React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { useState } from \"react\";\r\nimport { Box } from \"@mui/system\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {\r\n  collection,\r\n  query,\r\n  onSnapshot,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  where,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"../../firebase.js\";\r\n\r\nfunction Quests(props) {\r\n  const { userId } = props;\r\n  \r\n  let completed = false\r\n  const [checked, setChecked] = useState(completed);\r\n\r\n  const [quest, setQuest] = useState([]);\r\n\r\n  const handleChange = async (e, id) => {\r\n    const taskDocRef = doc(db, \"adventurerDB\", userId, \"quests\", id);\r\n    onSnapshot(taskDocRef, (snapshot) => {\r\n      snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        data: doc.data(),\r\n        completed : data.completed\r\n        \r\n      }));\r\n    });\r\n    completed = data.completed\r\n    try {\r\n      await updateDoc(taskDocRef, {\r\n        completed: checked,\r\n      });\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n    setChecked(!e.target.completed);\r\n  };\r\n  const handleDelete = async (id) => {\r\n    const taskDocRef = doc(db, \"adventurerDB\", userId, \"quests\", id);\r\n    onSnapshot(taskDocRef, (snapshot) => {\r\n      snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        data: doc.data(),\r\n      }));\r\n    });\r\n    try {\r\n      await deleteDoc(taskDocRef);\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const taskColRef = query(\r\n      collection(db, \"adventurerDB\", userId, \"quests\"),\r\n      where(\"userId\", \"==\", userId)\r\n    );\r\n    console.log(taskColRef);\r\n    onSnapshot(taskColRef, (snapshot) => {\r\n      setQuest(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      );\r\n    });\r\n  }, []);\r\n  console.log(quest);\r\n  const myQuest = quest.map((a) => (\r\n    <div>\r\n      <Checkbox\r\n        checked={checked}\r\n        label={a.data.name}\r\n        onChange={handleChange(a.data.completed, a.id)}\r\n        inputProps={{ \"aria-label\": \"controlled\" }}\r\n      ></Checkbox>\r\n      {a.data.name}\r\n\r\n      <div>\r\n        {\" \"}\r\n        <Button onClick={handleDelete(a.id, a.id)} variant=\"contained\">\r\n          Delete\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <Paper\r\n      elevation={10}\r\n      sx={{\r\n        padding: \"15px\",\r\n        heigth: \"400px\",\r\n      }}\r\n    >\r\n      <Box>{myQuest}</Box>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Quests;\r\n"]},"metadata":{},"sourceType":"module"}